#!/usr/bin/env ruby -rrubygems
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'quickl'
require "benchmark"
require "db_bench"
module DbBench

  #
  # BbBench - Let's compare our database approaches
  #
  class Main < Quickl::Delegate(__FILE__, __LINE__)

    #
    # Compare the execution of the different challengers
    #
    class Compare < Quickl::Command(__FILE__, __LINE__)
      
      options do |opt|
        @repeat = 1
        opt.on("--repeat=X", Integer){|i| @repeat = i}
      end
      
      def compare_one(i)
        puts "-"*150
        puts "Running challenge#{i}"
        Benchmark.bm(30){|x|
          Challenger.each{|challenger|
            challenger.setup
            x.report(challenger.name) {
              @repeat.times do 
                challenger.send(:"challenge#{i}")
              end
            }
            challenger.teardown
          }
        }
        puts
        puts
      end
      
      def execute(args)
        args = Challenger::CHALLENGES if args.size == 0
        args.each{|arg| compare_one(arg.to_i) }
      end
      
    end # class Compare
    
    #
    # Compete the different challengers
    #
    class Compete < Quickl::Command(__FILE__, __LINE__)
      
      def compete_one(i)
        puts "-"*150
        puts "Running challenge#{i}"
        Challenger.each{|challenger|
          challenger.setup
          tms, nb = Benchmark::Tms.new, 0
          while tms.total <= 1.0
            tms += Benchmark.measure{
              challenger.send(:"challenge#{i}")
            }
            nb += 1
          end
          puts "%-30s %-5s %s [%s]" % [challenger.name, nb, (tms/nb).to_s.strip, (tms.total)]
          challenger.teardown
        }
        puts
        puts
      end
      
      def execute(args)
        args = Challenger::CHALLENGES if args.size == 0
        args.each{|arg| compete_one(arg.to_i) }
      end
      
    end # class Compete
    
  end # class Main

end # module DbBench
DbBench::Main.run(ARGV)
